## 1 线程

summary：
- 共享的（shared），可变的（mutable）状态的访问
- 程序状态封装的越好，就越容易实现程序的线程安全
- 面向对象的抽象和封装都会降低程序性能
- 首先使代码正确运行，然后再提高代码速度
- 线程安全类和线程安全程序
- 线程安全的类和非线程安全的类的区别
```
当多个线程访问某个类时候，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。
```

### 2 线程安全性
#### 2.1 线程安全相关概念
无状态：即不包含任何域，也不包含任何对其他类中域的引用，计算过程中临时状态仅存在线程栈的局部变量中，无状态对象一定是线程安全的。
#### 2.2 原子性
- 各种操作仅为一步，不会交叉进行操作
##### 2.2.1  竞态条件
- 多个线程的交替执行时序时，就会产生竞态条件
##### 2.2.2 延迟初始化中的竞态条件
- 锁机制保证原子操作，复合操作通过加锁成为原子操作
#### 2.3 加锁机制
Ps：
- 类中的状态变量太多的时候，不能使用原子型变量而要使用锁机制，多个原子型变量分开执行期间可能会产生非线程安全的操作
##### 2.3.1 内置锁
- java提供的内置锁机制支持原子性：同步代码块（Synchronized block）
- 同步代码块包括两部分，一个作为锁的对象引用，一个作为由这个锁保护的代码块
##### 2.3.2 重入
- 重入意味着获取锁的操作的粒度是线程，而不是调用。
- 互斥锁是基于每一次调用
- 